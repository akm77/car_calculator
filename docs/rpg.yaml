rpg:
  metadata:
    project_name: "car_calculator"
    description: "FastAPI-сервис и Telegram-бот для расчёта стоимости ввоза авто на базе тарифов, комиссий и валютных курсов (статические YAML + опционально live CBR)."

  nodes:
    modules:
      - name: "app_core"
        path: "app/core"
        description: "Базовые настройки приложения и текстовые сообщения"
      - name: "app_calculation"
        path: "app/calculation"
        description: "Движок расчёта, модели, округление и тарифные таблицы"
      - name: "app_services"
        path: "app/services"
        description: "Инфраструктурные сервисы (курсы CBR, слияние статических/живых курсов)"
      - name: "app_api"
        path: "app/api"
        description: "HTTP API-маршруты FastAPI"
      - name: "app_main"
        path: "app"
        description: "Инициализация FastAPI, middleware, статика, health/debug эндпоинты"
      - name: "app_bot"
        path: "app/bot"
        description: "Telegram-бот (aiogram), клавиатуры и хендлеры"
      - name: "app_webapp"
        path: "app/webapp"
        description: "Статический PWA фронтенд (index.html, manifest, sw.js, ассеты)"
      - name: "config_data"
        path: "config"
        description: "YAML-конфиги тарифов: fees.yml, commissions.yml, rates.yml, duties.yml"
      - name: "tests"
        path: "tests"
        description: "Функциональные тесты API/движка и юнит-тесты CBR"

    files:
      - name: "settings.py"
        parent_module: "app_core"
        description: "AppSettings (env), загрузка YAML-конфигов (ConfigRegistry), кешируемые геттеры"
      - name: "messages.py"
        parent_module: "app_core"
        description: "Строковые сообщения ошибок/предупреждений/инфо"

      - name: "engine.py"
        parent_module: "app_calculation"
        description: "Основная бизнес-логика расчёта и вспомогательные функции"
      - name: "models.py"
        parent_module: "app_calculation"
        description: "Pydantic-модели запроса/мета/детализации/результата"
      - name: "rounding.py"
        parent_module: "app_calculation"
        description: "Функции округления и Decimal-утилиты"
      - name: "tariff_tables.py"
        parent_module: "app_calculation"
        description: "Функции поиска ставок пошлины/категорий/диапазонов"

      - name: "cbr.py"
        parent_module: "app_services"
        description: "CBRRatesService (fetch+cache), парсер XML, get_effective_rates"

      - name: "routes.py"
        parent_module: "app_api"
        description: "Маршруты: /api/health, /api/calculate, /api/rates, /api/rates/refresh, /api/meta"

      - name: "main.py"
        parent_module: "app_main"
        description: "Создание FastAPI-приложения, CORS, rate-limit, статика, /, /manifest.json, /sw.js, /ping, /debug/files"
      - name: "struct_logger.py"
        parent_module: "app_main"
        description: "Настройка structured logging (structlog), глобальный logger"

      - name: "main.py"
        parent_module: "app_bot"
        description: "Инициализация и запуск aiogram-бота; команды; валидация токена"
      - name: "handlers/start.py"
        parent_module: "app_bot"
        description: "Хендлеры /start, /calc, web_app_data; связка с движком расчёта"
      - name: "keyboards.py"
        parent_module: "app_bot"
        description: "ReplyKeyboard с WebApp-кнопкой"

      - name: "fees.yml"
        parent_module: "config_data"
        description: "Страны, валюта покупки, фрахт, базовые расходы/тиеры"
      - name: "commissions.yml"
        parent_module: "config_data"
        description: "Пороговые значения комиссий"
      - name: "rates.yml"
        parent_module: "config_data"
        description: "Статические курсы, утилизационный сбор, прочие ставки"
      - name: "duties.yml"
        parent_module: "config_data"
        description: "Пошлины по возрастным категориям и объёму; брэкет для <3 лет"

      - name: "functional/test_api.py"
        parent_module: "tests"
        description: "Функциональные тесты эндпоинтов /api/rates, /api/meta, /api/calculate"
      - name: "functional/test_engine.py"
        parent_module: "tests"
        description: "Параметризованные e2e-кейсы расчёта через API по cases.yml"
      - name: "functional/test_cbr.py"
        parent_module: "tests"
        description: "Юнит-тест парсера CBR XML и get_effective_rates (monkeypatch)"
      - name: "conftest.py"
        parent_module: "tests"
        description: "Фикстура TestClient(app)"

    components:
      - name: "AppSettings"
        parent_file: "settings.py"
        type: "class"
        description: "Загрузка ENV, флаги (ENABLE_LIVE_CBR и др.), деривативы (webapp_url, countries_list)"
        testable: true
        test_priority: "medium"

      - name: "ConfigRegistry.load"
        parent_file: "settings.py"
        type: "function"
        description: "Чтение YAML-конфигов, хэш и мета-время загрузки"
        testable: true
        test_priority: "medium"

      - name: "get_settings / get_configs"
        parent_file: "settings.py"
        type: "function"
        description: "Кешируемые провайдеры настроек и конфигов"
        testable: true
        test_priority: "medium"

      - name: "CalculationRequest"
        parent_file: "models.py"
        type: "class"
        description: "Валидация входа (год, валюта, типы), нормализация currency"
        testable: true
        test_priority: "high"

      - name: "CostBreakdown"
        parent_file: "models.py"
        type: "class"
        description: "Детализация стоимостей в RUB"
        testable: true
        test_priority: "medium"

      - name: "CalculationMeta"
        parent_file: "models.py"
        type: "class"
        description: "Метаданные расчёта: возраст/категории/ставки/использованные курсы"
        testable: true
        test_priority: "medium"

      - name: "CalculationResult"
        parent_file: "models.py"
        type: "class"
        description: "Контейнер результата расчёта"
        testable: true
        test_priority: "low"

      - name: "calculate"
        parent_file: "engine.py"
        type: "function"
        description: "Основная функция расчёта: конвертация, пошлина, утильсбор, фрахт, расходы, комиссия, итого"
        testable: true
        test_priority: "high"

      - name: "_compute_duty"
        parent_file: "engine.py"
        type: "function"
        description: "Расчёт пошлины: <3 лет по стоимости (EUR), 3-5/>5 по ставке €/см³"
        testable: true
        test_priority: "medium"

      - name: "_utilization_fee"
        parent_file: "engine.py"
        type: "function"
        description: "Выбор ставки утильсбора для M1 по объёму и возрасту"
        testable: true
        test_priority: "medium"

      - name: "_commission"
        parent_file: "engine.py"
        type: "function"
        description: "Комиссия по порогам от цены покупки в RUB"
        testable: true
        test_priority: "medium"

      - name: "_select_freight"
        parent_file: "engine.py"
        type: "function"
        description: "Выбор фрахта (тип+валюта) с конфиг‑дефолтом"
        testable: true
        test_priority: "low"

      - name: "_japan_country_expenses / _other_country_expenses"
        parent_file: "engine.py"
        type: "function"
        description: "Страновые расходы: Япония по тиру цены (в JPY), прочие — сумма базовых"
        testable: true
        test_priority: "low"

      - name: "get_age_category / get_passing_category"
        parent_file: "tariff_tables.py"
        type: "function"
        description: "Определение возрастной и «проходной» категорий"
        testable: true
        test_priority: "medium"

      - name: "find_duty_rate / find_lt3_value_bracket / format_volume_band"
        parent_file: "tariff_tables.py"
        type: "function"
        description: "Поиск ставки пошлины/брэкетов и форматирование диапазонов"
        testable: true
        test_priority: "medium"

      - name: "to_decimal / quantize4 / round_rub"
        parent_file: "rounding.py"
        type: "function"
        description: "Числовые утилиты и денежное округление (RUB)"
        testable: true
        test_priority: "medium"

      - name: "CBRRatesService"
        parent_file: "cbr.py"
        type: "class"
        description: "Потокобезопасный сервис CBR: fetch с retry, cache с TTL, парсер XML"
        testable: true
        test_priority: "high"

      - name: "parse_cbr_xml"
        parent_file: "cbr.py"
        type: "function"
        description: "Парсинг XML CBR в словарь {CODE_RUB: rate}"
        testable: true
        test_priority: "high"

      - name: "get_effective_rates"
        parent_file: "cbr.py"
        type: "function"
        description: "Слияние статических курсов с live (если доступны), аннотация источника"
        testable: true
        test_priority: "high"

      - name: "calculate_endpoint"
        parent_file: "routes.py"
        type: "function"
        description: "POST /api/calculate — валидация через pydantic и вызов calculate"
        testable: true
        test_priority: "high"

      - name: "get_rates / get_meta / health / refresh_rates"
        parent_file: "routes.py"
        type: "function"
        description: "Эндпоинты справочных данных и здоровья, форс‑обновление курсов"
        testable: true
        test_priority: "high"

      - name: "create_app / rate_limit_middleware / lifespan"
        parent_file: "main.py"
        type: "function"
        description: "Инициализация FastAPI, CORS, rate limit, статика и служебные маршруты"
        testable: true
        test_priority: "medium"

      - name: "setup_logging / logger"
        parent_file: "struct_logger.py"
        type: "function"
        description: "Конфигурация structlog и глобальный логгер"
        testable: true
        test_priority: "low"

      - name: "_build_bot / _build_dispatcher / _set_commands / main_async / run_bot"
        parent_file: "app/bot/main.py"
        type: "function"
        description: "Инициализация бота (валидация токена), регистрация хендлеров, polling"
        testable: true
        test_priority: "medium"

      - name: "cmd_start / cmd_calc / on_webapp_data / register"
        parent_file: "app/bot/handlers/start.py"
        type: "function"
        description: "Хендлеры aiogram, интеграция с движком расчёта, вывод результатов"
        testable: true
        test_priority: "medium"

      - name: "main_menu"
        parent_file: "app/bot/keyboards.py"
        type: "function"
        description: "Клавиатура с WebApp-кнопкой"
        testable: true
        test_priority: "low"

  tests:
    unit_tests:
      - target_component: "parse_cbr_xml"
        test_file: "tests/functional/test_cbr.py"
        test_functions: ["test_parse_cbr_xml_basic"]
        coverage_status: "exists"
      - target_component: "get_effective_rates"
        test_file: "tests/functional/test_cbr.py"
        test_functions: ["test_get_effective_rates_monkeypatch"]
        coverage_status: "exists"
      - target_component: "CalculationRequest.validate_year"
        test_file: "-"
        test_functions: []
        coverage_status: "missing"
      - target_component: "round_rub / to_decimal"
        test_file: "-"
        test_functions: []
        coverage_status: "missing"
      - target_component: "tariff_tables core helpers"
        test_file: "-"
        test_functions: []
        coverage_status: "missing"
      - target_component: "rate_limit_middleware"
        test_file: "-"
        test_functions: []
        coverage_status: "missing"

    integration_tests:
      - integration_point: "API -> Calculation Engine"
        test_description: "POST /api/calculate для набора кейсов (детализация сумм и возрастная категория)"
        test_file: "tests/functional/test_engine.py"
        coverage_status: "exists"
      - integration_point: "API -> Configs (rates/fees/commissions/duties)"
        test_description: "GET /api/rates и /api/meta возвращают структуры для фронтенда"
        test_file: "tests/functional/test_api.py"
        coverage_status: "exists"
      - integration_point: "API -> CBR Service (refresh)"
        test_description: "POST /api/rates/refresh форсит обновление кэша CBR"
        test_file: "-"
        coverage_status: "needed"
      - integration_point: "Bot -> Engine"
        test_description: "Хендлеры /calc и web_app_data вызывают calculate и форматируют результат"
        test_file: "-"
        coverage_status: "needed"
      - integration_point: "App Static -> WebApp"
        test_description: "Раздача /web/, /manifest.json, /sw.js"
        test_file: "-"
        coverage_status: "needed"

  edges:
    inter_module_flows:
      - from: "app_core"
        to: "app_calculation"
        data_type: "ConfigRegistry (rates, duties, fees, commissions)"
        description: "engine.calculate использует get_configs() для тарифов"
      - from: "app_services"
        to: "app_calculation"
        data_type: "dict (currencies merged, live_source)"
        description: "get_effective_rates подмешивает live-курсы в статические для конвертаций"
      - from: "app_api"
        to: "app_calculation"
        data_type: "CalculationRequest -> CalculationResult"
        description: "REST слой валидирует вход и проксирует в движок расчёта"
      - from: "app_main"
        to: "app_api"
        data_type: "APIRouter"
        description: "main.create_app монтирует router с префиксом /api"
      - from: "app_bot"
        to: "app_calculation"
        data_type: "CalculationRequest (собранный в коде) -> CalculationResult"
        description: "Хендлеры бота вызывают calculate для примеров и данных WebApp"
      - from: "config_data"
        to: "app_core"
        data_type: "YAML -> dict"
        description: "settings.ConfigRegistry.load загружает YAML в словари"
      - from: "app_services"
        to: "app_core"
        data_type: "settings"
        description: "CBR-сервис использует AppSettings для URL, TTL и флагов live"

    intra_module_dependencies:
      - from: "engine.py"
        to: "models.py"
        dependency_type: "import"
        description: "Типы CalculationRequest/Result, CostBreakdown, Meta"
      - from: "engine.py"
        to: "rounding.py"
        dependency_type: "import"
        description: "Округление и Decimal-утилиты"
      - from: "engine.py"
        to: "tariff_tables.py"
        dependency_type: "import"
        description: "Определение категорий и ставок пошлины"
      - from: "engine.py"
        to: "cbr.py"
        dependency_type: "import"
        description: "get_effective_rates для конвертации валют"
      - from: "routes.py"
        to: "engine.py"
        dependency_type: "import"
        description: "Вызов calculate() из эндпоинта"
      - from: "routes.py"
        to: "settings.py"
        dependency_type: "import"
        description: "Чтение конфигов/настроек в /rates, /meta, /health"
      - from: "app/main.py"
        to: "app/api/routes.py"
        dependency_type: "import"
        description: "Монтирование API роутера"
      - from: "app/bot/handlers/start.py"
        to: "app/bot/keyboards.py"
        dependency_type: "import"
        description: "Формирование клавиатуры для WebApp"
      - from: "app/bot/handlers/start.py"
        to: "engine.py"
        dependency_type: "import"
        description: "Пример расчёта и обработка WebApp-данных"

    component_relationships:
      - from: "calculate"
        to: "_compute_duty"
        relationship: "calls"
        description: "Расчёт пошлины по возрастной категории и объёму"
      - from: "calculate"
        to: "_utilization_fee"
        relationship: "calls"
        description: "Подбор утильсбора M1"
      - from: "calculate"
        to: "_commission"
        relationship: "calls"
        description: "Комиссия по порогам"
      - from: "calculate"
        to: "get_effective_rates"
        relationship: "uses"
        description: "Подмешивание live‑курсов CBR поверх статических"
      - from: "_compute_duty"
        to: "find_lt3_value_bracket / find_duty_rate"
        relationship: "uses"
        description: "Определение ставок пошлины"
      - from: "calculate_endpoint"
        to: "calculate"
        relationship: "calls"
        description: "Главный API-эндпоинт расчёта"
      - from: "get_rates / get_meta / health"
        to: "get_configs / get_settings"
        relationship: "uses"
        description: "Чтение конфигов и настроек"
      - from: "get_effective_rates"
        to: "fetch_cbr_rates"
        relationship: "calls"
        description: "Загрузка live‑курсов при включённом флаге"
      - from: "CBRRatesService._do_fetch"
        to: "httpx.get"
        relationship: "calls"
        description: "Запрос XML CBR и разбор"
      - from: "create_app"
        to: "api.router"
        relationship: "uses"
        description: "Монтирование маршрутизатора в приложение"
      - from: "rate_limit_middleware"
        to: "JSONResponse"
        relationship: "uses"
        description: "Ответ 429 при превышении лимита"
      - from: "cmd_calc / on_webapp_data"
        to: "calculate"
        relationship: "calls"
        description: "Расчёт по команде бота и данным WebApp"
